# P1 port
- platform: dsmr
  port: /dev/ttyUSB0
  dsmr_version: 4

# sys
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_free
    - type: processor_use
    - type: last_boot
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: processor_temperature
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: ipv4_address
      arg: eth0
    - type: ipv6_address
      arg: eth0

# travis CI
- platform: travisci
  api_key: !secret travis_api_key

# afval info
- platform: afvalinfo
  resources:
    - gft
    - kerstboom
    - pbd
    - papier
    - restafval
    - textiel
    - trash_type_today
    - trash_type_tomorrow
  location: !secret mycity
  postcode: !secret mypostcode
  streetnumber: !secret mystreetnumber
  dateformat: "%d-%m-%Y"
  locale: "nl"
  timespanindays: 365

# template for octopi
- platform: template
  sensors:
    octoprint_time_elapsed_friendly:
      friendly_name: "Octoprint time elapsed"
      value_template: "{{ states('sensor.octoprint_time_elapsed') | int | timestamp_custom('%H:%M:%S', 0) }}"
    octoprint_time_remaining_friendly:
      friendly_name: "Octoprint time remaining"    
      value_template: >-
        {% set etime = states.sensor.octoprint_time_remaining.state | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {%- if days > 0 -%}
          {%- if days == 1 -%}
            1 day
          {%- else -%}
            {{ days }} days
          {%- endif -%}
          {{ ', ' }}
        {%- endif -%}
        {%- if hours > 0 -%}
          {%- if hours == 1 -%}
            1 hour
          {%- else -%}
            {{ hours }} hours
          {%- endif -%}
          {{ ', ' }}
        {%- endif -%}
        {%- if minutes > 0 -%}
          {%- if minutes == 1 -%}
            1 minute
          {%- else -%}
            {{ minutes }} minutes
          {%- endif -%}
        {%- endif -%}
    afvalinfo_next_trash_type_and_date:
      value_template: >
        {% set ns = namespace(minimum=365) %}
        {% set list = ['gft', 'kerstboom', 'papier', 'pbd', 'restafval','textiel'] %}
        {%- for l in list %}
        {%- set days = state_attr('sensor.afvalinfo_' ~l, 'days_until_collection_date')%}
        {%- if days != None and days < ns.minimum %}
        {%- set ns.minimum = days %}
        {%- endif %}
        {%- endfor %}
        {%- for l in list %}
        {%- set days = state_attr('sensor.afvalinfo_' ~l, 'days_until_collection_date')%}
        {%- if days == ns.minimum %}
        {{l}} · {{ states('sensor.afvalinfo_' ~l) }}
        {%- endif %}
        {%- endfor %}
    paper_days_until_collection:
      value_template: "{{ state_attr('sensor.afvalinfo_papier', 'days_until_collection_date') }}"

# time/date
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
    - 'beat'

# Weather prediction
- platform: buienradar
  monitored_conditions:
    # current condition:
    - condition
    - conditioncode
    - conditiondetailed
    - conditionexact
    - symbol
    # conditions for forecasted data:
    - symbol_1d
    - symbol_2d
    - symbol_3d
    - symbol_4d
    - symbol_5d
    - temperature_1d
    - temperature_2d
    - temperature_3d
    - temperature_4d
    - temperature_5d
    - mintemp_1d
    - rainchance_1d
    - rainchance_2d
    - sunchance_1d
    - sunchance_2d
    - rain_1d
    - rain_2d
    - minrain_1d
    - maxrain_1d
    - windforce_1d
    - windforce_2d
    - windspeed_1d
    - windspeed_2d
    - winddirection_1d
    - winddirection_2d
    - windazimuth_1d
    - windazimuth_2d
    - stationname
    - barometerfc
    - barometerfcname
    - feeltemperature
    - humidity
    - temperature
    - groundtemperature
    - windspeed
    - windforce
    - winddirection
    - windazimuth
    - pressure
    - visibility
    - windgust
    - precipitation
    - irradiance
    - precipitation_forecast_average
    - precipitation_forecast_total
    - rainlast24hour
    - rainlasthour

# template
- platform: template
  sensors:
    # difference between outside and inside temperature
    d_in_out_temp:
      friendly_name: "Difference in temperature between outside and inside"
      unit_of_measurement: '°C'
      value_template: "{{ ((states('sensor.br_temperature')| float) - (states('sensor.bedroom_stefan_temperature')| float)) | round(1) }}"
    
    # solar edge unit conversion templates
    solaredge_current_power_kw:
      value_template: "{{ (states('sensor.solaredge_current_power') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kW'
    solaredge_energy_today_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_today') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_lifetime_energy_kwh:
      value_template: "{{ (states('sensor.solaredge_lifetime_energy') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_year_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_this_year') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_month_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_this_month') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredgemb_ac_power_kw:
      value_template: "{{ (states('sensor.solaredgemb_ac_power') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kW'      

    # pc energy unit conversion templates    
    pc_energy_consumption_daily_kwh:
      value_template: "{{ (states('sensor.pc_energy_consumption_daily') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    pc_energy_consumption_monthly_kwh:
      value_template: "{{ (states('sensor.pc_energy_consumption_monthly') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'

    # meter templates
    daily_energy:
      friendly_name: Daily Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float) | round(2) }}"
    monthly_energy:
      friendly_name: Monthly Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float) | round(2) }}"
    
    # solar angle sensor template
    solar_elevation:
      friendly_name: "Sun elevation"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    solar_azimuth:
      friendly_name: "Sun azimuth"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'azimuth') }}"
    
    # solar edge state converter
    solaredgemb_status_verbose:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredgemb_status', 'status_description') }}"
    
    # solar edge installation date
    solaredgemb_installation_date:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'installation_date') }}"
    
    # solar edge last update time
    solaredgemb_last_update_time:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'last_update_time') }}"
    
    # netto consumption = solar_yield - solar_returned + grid_consumption
    netto_consumption:
      friendly_name: "Netto consumption"
      unit_of_measurement: 'kW'
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float) + (states('sensor.power_consumption')| float)) | round(2) }}"
    
    # solar energy consumed
    solar_consumption:
      friendly_name: "Solar energy consumption"
      unit_of_measurement: 'kW'
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float)) | round(2) }}"
    
    # afvalinfo yyyy-mm-dd format
    afvalinfo_pbd_ymd:
      friendly_name: "PBD"
      value_template: "{{ state_attr('sensor.afvalinfo_pbd', 'year_month_day_date') }}"
    afvalinfo_gft_ymd:
      friendly_name: "GFT"
      value_template: "{{ state_attr('sensor.afvalinfo_gft', 'year_month_day_date') }}"
    afvalinfo_papier_ymd:
      friendly_name: "Papier"
      value_template: "{{ state_attr('sensor.afvalinfo_papier', 'year_month_day_date') }}"
    afvalinfo_restafval_ymd:
      friendly_name: "Restafval"
      value_template: "{{ state_attr('sensor.afvalinfo_restafval', 'year_month_day_date') }}"
   
    # expected solar energy  
    expected_solar_energy_percentage:
      friendly_name: "Solar output as percentage of monthly expected"
      value_template: "{{ ((states('sensor.solaredge_energy_this_month_kwh') | int) / (states('sensor.expected_solar_output_monthly') | int)*100 )|round(1)}}"  
      unit_of_measurement: '%'

    # octoprint time ready ETA
    octoprint_time_ready:
      friendly_name: 'ETA'
      value_template: >-
        {% if is_state('binary_sensor.octoprint_printing', 'on') %}
          {%- set date = as_timestamp(now()) + states('sensor.octoprint_time_remaining')|float -%}
          {{ date|timestamp_local }} 
        {% else %}
        {{"N/A"}}
        {% endif %}

    # pc energy setup green
    pc_setup_green_kw:
      friendly_name: 'PC power received from solarpanels in kw'
      unit_of_measurement: 'kW'
      value_template: >-
        {% if(states('sensor.power_production')|float > 0|float) -%}
          {{ states('sensor.bw_shp10_2_energy_power_2')|float / 1000 }}
          {%- else -%}
            {{
              ((
                states('sensor.bw_shp10_2_energy_power_2')|float   * 
                (
                  states('sensor.solaredgemb_ac_power_kw')|float / 
                  (states('sensor.netto_consumption'))|float
                )
              ) / 1000) | round(3) |float
            }}
        {%- endif %}

    # total energy consumed    
    total_energy_consumed_kwh:
      friendly_name: 'Combined tarif 1 and 2 energy consumption in kWh'
      unit_of_measurement: 'kWh'
      value_template: "{{ (states('sensor.energy_consumption_tarif_2') | float + states('sensor.energy_consumption_tarif_1') | float) | round(1) }}"
    
    # total energy produced    
    total_energy_produced_kwh:
      friendly_name: 'Combined tarif 1 and 2 energy production in kWh'
      unit_of_measurement: 'kWh'
      value_template: "{{ (states('sensor.energy_production_tarif_2') | float + states('sensor.energy_production_tarif_1') | float) | round(1) }}"


# integration for pc energy setup green
- platform: integration
  source: sensor.pc_setup_green_kw
  name: pc_energy_consumption_green

# integration for grid feed energy sensor
- platform: integration
  source: sensor.power_production
  name: energy_returned

# integration for PC energy usage sensor
- platform: integration
  source: sensor.bw_shp10_2_energy_power_2
  name: energy_pc_setup

# Octoprint Current Filename
- platform: rest
  name: OctoPrint Current Filename
  resource: http://192.168.50.118/api/job
  headers:
    X-Api-Key: !secret octopi_api_key
  value_template: '{{ value_json.job.file.path }}'

# unavailable entities
- platform: template
  sensors:
    unavailable_entities:
      friendly_name: Unavailable Entities
      unit_of_measurement: entities
      icon_template: "{{ 'mdi:check-circle' if is_state('sensor.unavailable_entities','0') else 'mdi:alert-circle' }}"
      value_template: >
        {{ states|selectattr('state','in',['unavailable'])|rejectattr('domain','eq','group')
          |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|list|count }}
#      value_template: > 
#        {{ states|selectattr('state','in',['unavailable','unknown','none'])|rejectattr('domain','eq','group')
#          |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|list|count }}
#      attribute_templates:
#        entities: >
#          {{ states|selectattr('state','in',['unavailable','unknown','none'])|rejectattr('domain','eq','group')
#              |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|map(attribute='entity_id')|list }}
      attribute_templates:
              entities: >
                {{ states|selectattr('state','in',['unavailable'])|rejectattr('domain','eq','group')
                    |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|map(attribute='entity_id')|list }}

# statistics feel temperature
- platform: statistics
  name: br_feel_stats
  entity_id: sensor.br_feel_temperature
  sampling_size: 99999999999
  max_age:
    hours: 24

# waze travel time
- platform: waze_travel_time
  name: work_d
  origin: !secret mylocale
  destination: !secret workdestination_d
  region: "EU"
- platform: waze_travel_time
  name: work_m
  origin: !secret mylocale
  destination: !secret workdestination_m
  region: "EU"
- platform: waze_travel_time
  name: eindhoven
  origin: !secret mylocale
  destination: !secret workdestination_d
  region: "EU"

# NS reistijd sensors
- platform: nederlandse_spoorwegen
  api_key: !secret NS_API_KEY
  routes:
    - name: Kampen-Eindhoven
      from: Kpnz
      to: Ehv
    - name: Eindhoven-Kampen
      from: Ehv
      to: Kpnz

# average platform
- platform: average
  name: 'Average max solar production per day'
  duration:
    days: 2
  entities:
    - sensor.solaredge_energy_today_kwh

# average max solar production per day via statistics
- platform: statistics
  entity_id: sensor.solaredge_energy_today_kwh
  name: daily solar stats
  sampling_size: 999999999
  max_age:
    hours: 16
- platform: template
  sensors:
    daily_solar_kwh_max:
      value_template: "{{ state_attr('sensor.daily_solar_stats', 'max_value') }}"
      friendly_name: Max solar production per day
      unit_of_measurement: kWh

# Ambee Pollen vertaald door huizebruin.nl en Roel R
# Bron : https://gist.github.com/michilehr/7ce7431f97e82523336a120b50d0ebe2
- platform: rest
  name: pollen_data
  scan_interval: 3600
  resource_template: https://api.ambeedata.com/latest/pollen/by-lat-lng?lat={{ state_attr("zone.home", "latitude") }}&lng={{ state_attr("zone.home", "longitude") }}
  value_template: >-
    {{ value_json.message}}
  headers:
    content-type: application/json
    x-api-key: !secret ambee-api
  json_attributes_path: data[0]
  json_attributes:
    - Count
    - Risk
    - Species
    - updatedAt
    - time
- platform: template
  sensors:
    pollen_bomen:
      friendly_name: Bomen
      icon_template: mdi:tree
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").tree_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Middelmatig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").tree_pollen }} /m³
        Els: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Alder }} /m³
        Berk: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Birch }} /m³
        Coniferen: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Cypress }} /m³
        Iep: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Elm }} /m³
        Hazelaar: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Hazel }} /m³
        Eik: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Oak }} /m³
        Den: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Pine }} /m³
        Plataan: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree.Plane }} /m³
        Populier: >-
          {{ state_attr("sensor.pollen_data", "Species").Tree["Poplar / Cottonwood"] }} /m³
    pollen_grassen:
      friendly_name: Grassen
      icon_template: mdi:grass
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").grass_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Middelmatig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").grass_pollen }} /m³
        Gramineae: >-
          {{ state_attr("sensor.pollen_data", "Species").Grass["Grass / Poaceae"] }} /m³
    pollen_onkruiden:
      friendly_name: Onkruiden
      icon_template: mdi:grass
      value_template: >-
        {% set state = state_attr("sensor.pollen_data", "Risk").weed_pollen %}
        {% if state == "Low" %} Weinig
        {% elif state == "Moderate"%} Middelmatig
        {% elif state == "High"%} Hoog
        {% elif state == "Very High"%} Zeer hoog
        {% else %}Onbekend{% endif %}
      attribute_templates:
        Totaal: >-
          {{ state_attr("sensor.pollen_data", "Count").weed_pollen }} /m³
        Amaranten/Ganzenvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Chenopod }} /m³
        Bijvoet: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Mugwort }} /m³
        Brandnetel: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Nettle }} /m³
        Ambrosia: >-
          {{ state_attr("sensor.pollen_data", "Species").Weed.Ragweed }} /m³
    pollen_tree_count:
      icon_template: mdi:tree-outline
      friendly_name: "Bomen"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").tree_pollen }}'
    pollen_weed_count:
      icon_template: mdi:grass
      friendly_name: "Onkruid"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").weed_pollen }}'
    pollen_grass_count:
      icon_template: mdi:grass
      friendly_name: "Gras"
      unit_of_measurement: " /m³"
      value_template: '{{ state_attr("sensor.pollen_data", "Count").grass_pollen }}'
    pollen_last_updated:
      icon_template: "mdi:clock"
      friendly_name: "Laatste update"
      device_class: timestamp
      value_template: "{{ state_attr('sensor.pollen_data', 'updatedAt') }}"

# calculated solar panel output per month
- platform: template
  sensors:
    expected_solar_output_monthly:
      friendly_name: Expected solar output per month kWh
      unit_of_measurement: 'kWh'
      value_template: >-
        {% if now().month == 1 %} 84
        {% elif now().month == 2 %} 143
        {% elif now().month == 3 %} 279
        {% elif now().month == 4 %} 386
        {% elif now().month == 5 %} 435
        {% elif now().month == 6 %} 425
        {% elif now().month == 7 %} 422
        {% elif now().month == 8 %} 377
        {% elif now().month == 9 %} 305
        {% elif now().month == 10 %} 224
        {% elif now().month == 11 %} 104
        {% elif now().month == 12 %} 62
        {% endif %}
