# sys
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_free
    - type: processor_use
    - type: last_boot
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: processor_temperature
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: ipv4_address
      arg: eth0
    - type: ipv6_address
      arg: eth0

# travis CI
- platform: travisci
  api_key: !secret travis_api_key

# afval beheer
- platform: afvalbeheer
  wastecollector: MijnAfvalwijzer
  resources:
    - restafval
    - gft
    - papier
    - pmd
  postcode: !secret mypostcode
  streetnumber: !secret mystreetnumber
  upcomingsensor: 1
  dateformat: "%Y-%m-%d"
  nameprefix: 0
  dutch: 1
  dateonly: 1

# # afval info
# - platform: afvalinfo
#   resources:
#     - type: gft
#       friendly_name: Groente Fruit en Tuinafval
#     - type: kerstboom
#       friendly_name: Kerstboom
#     - type: pbd
#       friendly_name: Plastic Blik en Drankkartons
#     - type: papier
#       friendly_name: Papier
#     - type: restafval
#       friendly_name: Restafval
#     - type: takken
#       friendly_name: Takken
#     - type: textiel
#       friendly_name: Oude Kleding
#     - type: trash_type_today
#       friendly_name: Afval voor vandaag
#     - type: trash_type_tomorrow
#       friendly_name: Afval voor morgen
#   location: !secret mycity
#   postcode: !secret mypostcode
#   streetnumber: !secret mystreetnumber
#   dateformat: "%d-%m-%Y"
#   locale: "nl"
#   timespanindays: 365

# time/date
- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "date_time_iso"
    - "time_date"
    - "time_utc"
    - "beat"

# Filtered netto consumption. Consumption is in kW
- platform: filter
  name: "Filtered netto consumption"
  entity_id: sensor.netto_consumption
  filters:
    - filter: outlier
      window_size: 5
      radius: 1.5
    - filter: time_simple_moving_average
      window_size: "00:00:30"
      precision: 3
    - filter: range
      lower_bound: 0

# template
- platform: template
  sensors:
    # difference between outside and inside temperature
    d_in_out_temp:
      friendly_name: "Difference in temperature between outside and inside"
      unit_of_measurement: "Â°C"
      value_template: "{{ ((states('sensor.br_temperature')| float) - (states('sensor.bedroom_stefan_temperature')| float)) | round(1) }}"

    # meter templates
    daily_energy:
      friendly_name: Daily Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float) | round(2) }}"
    monthly_energy:
      friendly_name: Monthly Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float) | round(2) }}"

    # solar angle sensor template
    solar_elevation:
      friendly_name: "Sun elevation"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    solar_azimuth:
      friendly_name: "Sun azimuth"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'azimuth') }}"

    # solar edge state converter
    solaredgemb_status_verbose:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredgemb_status', 'status_description') }}"

    # solar edge installation date
    solaredgemb_installation_date:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'installation_date') }}"

    # solar edge last update time
    solaredgemb_last_update_time:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'last_update_time') }}"

    # netto consumption = solar_yield - solar_returned + grid_consumption
    netto_consumption:
      friendly_name: "Netto consumption"
      unit_of_measurement: "kW"
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float) + (states('sensor.power_consumption')| float)) | round(3) }}"

    # solar energy consumed
    solar_consumption:
      friendly_name: "Solar energy consumption"
      unit_of_measurement: "kW"
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float)) | round(2) }}"

    # expected solar energy
    expected_solar_energy_percentage:
      friendly_name: "Solar output as percentage of monthly expected"
      value_template: "{{ ((states('sensor.solaredge_energy_this_month_2') | int) / (states('sensor.expected_solar_output_monthly') | int)*100 )|round(1)}}"
      unit_of_measurement: "%"
      availability_template: "{{ states('sensor.expected_solar_output_monthly') | float > 0 }}"

    # solar edge unit conversion templates
    solaredge_current_power_kw:
      value_template: "{{ (states('sensor.solaredge_current_power') | float / 1000) | round(2) }}"
      unit_of_measurement: "kW"

    solaredgemb_ac_power_kw:
      value_template: "{{ (states('sensor.solaredgemb_ac_power') | float / 1000) | round(2) }}"
      unit_of_measurement: "kW"

    solaredgemb_ac_power_w_rounded:
      value_template: "{{ states('sensor.solaredgemb_ac_power') | round(0) }}"
      unit_of_measurement: "W"

    # octoprint time ready ETA
    octoprint_time_ready:
      friendly_name: "ETA"
      value_template: >-
        {% if is_state('binary_sensor.octoprint_printing', 'on') %}
          {%- set date = as_timestamp(now()) + states('sensor.octoprint_time_remaining')|float -%}
          {{ date|timestamp_local }} 
        {% else %}
        {{"N/A"}}
        {% endif %}

    # pc energy setup green
    pc_setup_green_kw:
      friendly_name: "PC power received from solarpanels in kw"
      unit_of_measurement: "kW"
      value_template: >-
        {% if(states('sensor.power_production')|float > 0|float) -%}
          {{ states('sensor.pc_stefan_power')|float / 1000 }}
          {%- else -%}
            {{((states('sensor.pc_stefan_power')|float *(
                states('sensor.solaredgemb_ac_power_kw')|float / 
               (states('sensor.filtered_netto_consumption'))|float)) / 1000) | round(3) |float }}
        {%- endif %}

    # total energy consumed
    total_energy_consumed_kwh:
      friendly_name: "Combined tarif 1 and 2 energy consumption in kWh"
      unit_of_measurement: "kWh"
      value_template: "{{ (states('sensor.energy_consumption_tarif_2') | float + states('sensor.energy_consumption_tarif_1') | float) | round(1) }}"

    # total energy produced
    total_energy_produced_kwh:
      friendly_name: "Combined tarif 1 and 2 energy production in kWh"
      unit_of_measurement: "kWh"
      value_template: "{{ (states('sensor.energy_production_tarif_2') | float + states('sensor.energy_production_tarif_1') | float) | round(1) }}"

    # current power consumption in W
    power_consumption_w:
      friendly_name: "Current net power consumption in W"
      unit_of_measurement: "W"
      value_template: "{{ (states('sensor.power_consumption') | float * 1000) | round(0) }}"

# integration for pc energy setup green
- platform: integration
  source: sensor.pc_setup_green_kw
  name: pc_energy_consumption_green

# integration for grid feed energy sensor
- platform: integration
  source: sensor.power_production
  name: energy_returned

# Netto consumption energy sensor (for whole house netto consumption)
- platform: integration
  source: sensor.filtered_netto_consumption
  name: Netto filtered energy consumption

# Octoprint Current Filename
- platform: rest
  name: OctoPrint Current Filename
  resource: http://192.168.50.118/api/job
  headers:
    X-Api-Key: !secret octopi_api_key
  value_template: "{{ value_json.job.file.path }}"

# unavailable entities
- platform: template
  sensors:
    unavailable_entities:
      friendly_name: Unavailable Entities
      unit_of_measurement: entities
      icon_template: "{{ 'mdi:check-circle' if is_state('sensor.unavailable_entities','0') else 'mdi:alert-circle' }}"
      value_template: >
        {{ states|selectattr('state','in',['unavailable'])|rejectattr('domain','eq','group')
          |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|list|count }}
      #      value_template: >
      #        {{ states|selectattr('state','in',['unavailable','unknown','none'])|rejectattr('domain','eq','group')
      #          |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|list|count }}
      #      attribute_templates:
      #        entities: >
      #          {{ states|selectattr('state','in',['unavailable','unknown','none'])|rejectattr('domain','eq','group')
      #              |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|map(attribute='entity_id')|list }}
      attribute_templates:
        entities: >
          {{ states|selectattr('state','in',['unavailable'])|rejectattr('domain','eq','group')
              |rejectattr('entity_id','in',state_attr('group.ignored_entities','entity_id'))|map(attribute='entity_id')|list }}

# statistics feel temperature
- platform: statistics
  name: br_feel_stats
  entity_id: sensor.br_feel_temperature
  sampling_size: 99999999999
  max_age:
    hours: 24

- platform: template
  sensors:
    br_feel_mean:
      value_template: "{{ state_attr('sensor.br_feel_stats', 'mean') | float}}"
      friendly_name: Buienradar feel temperature mean
      unit_of_measurement: "Â°C"
    br_feel_max:
      value_template: "{{ state_attr('sensor.br_feel_stats', 'max_value') | float}}"
      friendly_name: Buienradar feel temperature max
      unit_of_measurement: "Â°C"
    br_feel_min:
      value_template: "{{ state_attr('sensor.br_feel_stats', 'min_value') | float }}"
      friendly_name: Buienradar feel temperature min
      unit_of_measurement: "Â°C"

# NS reistijd sensors
- platform: nederlandse_spoorwegen
  api_key: !secret NS_API_KEY
  routes:
    - name: Kampen-Eindhoven
      from: Kpnz
      to: Ehv
    - name: Eindhoven-Kampen
      from: Ehv
      to: Kpnz

# average max solar production per day via statistics
- platform: statistics
  entity_id: sensor.solaredge_energy_today_kwh
  name: daily solar stats
  sampling_size: 999999999
  max_age:
    hours: 16
- platform: template
  sensors:
    daily_solar_kwh_max:
      value_template: "{{ state_attr('sensor.daily_solar_stats', 'max_value') }}"
      friendly_name: Max solar production per day
      unit_of_measurement: kWh

# calculated solar panel output per month
- platform: template
  sensors:
    expected_solar_output_monthly:
      friendly_name: Expected solar output per month kWh
      unit_of_measurement: "kWh"
      value_template: >-
        {% if now().month == 1 %} 84
        {% elif now().month == 2 %} 143
        {% elif now().month == 3 %} 279
        {% elif now().month == 4 %} 386
        {% elif now().month == 5 %} 435
        {% elif now().month == 6 %} 425
        {% elif now().month == 7 %} 422
        {% elif now().month == 8 %} 377
        {% elif now().month == 9 %} 305
        {% elif now().month == 10 %} 224
        {% elif now().month == 11 %} 104
        {% elif now().month == 12 %} 62
        {% endif %}

# air quality sensor statistics room stefan
- platform: statistics
  name: pm_2_5_stefan_stats
  entity_id: sensor.vindriktning_stefan_pm2_5_concentration
  sampling_size: 100
  max_age:
    minutes: 20

- platform: template
  sensors:
    pm_2_5_stefan_mean:
      value_template: "{{ state_attr('sensor.pm_2_5_stefan_stats', 'mean') | float}}"
      friendly_name: PM2.5 Stefan mean
      unit_of_measurement: "Âµg/mÂ³"
    pm_2_5_stefan_max:
      value_template: "{{ state_attr('sensor.pm_2_5_stefan_stats', 'max_value') | float}}"
      friendly_name: PM2.5 Stefan mean max
      unit_of_measurement: "Âµg/mÂ³"
    pm_2_5_stefan_min:
      value_template: "{{ state_attr('sensor.pm_2_5_stefan_stats', 'min_value') | float }}"
      friendly_name: PM2.5 Stefan mean min
      unit_of_measurement: "Âµg/mÂ³"

# air quality sensor statistics livingroom
- platform: statistics
  name: pm_2_5_livingroom_stats
  entity_id: sensor.vindriktning_livingroom_pm2_5_concentration
  sampling_size: 100
  max_age:
    minutes: 20
- platform: template
  sensors:
    pm_2_5_living_room_mean:
      value_template: "{{ state_attr('sensor.pm_2_5_livingroom_stats', 'mean') | float}}"
      friendly_name: PM2.5 living room mean mean
      unit_of_measurement: "Âµg/mÂ³"
    pm_2_5_living_room_max:
      value_template: "{{ state_attr('sensor.pm_2_5_livingroom_stats', 'max_value') | float}}"
      friendly_name: PM2.5 living room max
      unit_of_measurement: "Âµg/mÂ³"
    pm_2_5_living_room_min:
      value_template: "{{ state_attr('sensor.pm_2_5_livingroom_stats', 'min_value') | float }}"
      friendly_name: PM2.5 living room min
      unit_of_measurement: "Âµg/mÂ³"

# test last changed timestamp update
- platform: template
  sensors:
    sensor_keuken_dimschakelaar_lastupdate:
      friendly_name: "humidity room"
      value_template: "{{ states.binary_sensor.keuken_dimschakelaar.last_changed }}"
      device_class: timestamp

# for afvalophaling card
- platform: template
  sensors:
    papier_formatted_short:
      friendly_name: "sensor_date_short_papier"
      value_template: "{{ as_timestamp(states('sensor.papier')) | timestamp_custom('%d-%m') }}"
    gft_formatted_short:
      friendly_name: "sensor_date_short_gft"
      value_template: "{{ as_timestamp(states('sensor.gft')) | timestamp_custom('%d-%m') }}"
    pmd_formatted_short:
      friendly_name: "sensor_date_short_pmd"
      value_template: "{{ as_timestamp(states('sensor.pmd')) | timestamp_custom('%d-%m') }}"
    restafval_formatted_short:
      friendly_name: "sensor_date_short_restafval"
      value_template: "{{ as_timestamp(states('sensor.restafval')) | timestamp_custom('%d-%m') }}"
    date_recycle_vandaag_formatted_short:
      friendly_name: "sensor_date_short_afval_vandaag"
      value_template: "{{ as_timestamp(states('sensor.afval_vandaag')) | timestamp_custom('%d-%m') }}"
    date_recycle_morgen_formatted_short:
      friendly_name: "sensor_date_short_afval_morgen"
      value_template: "{{ as_timestamp(states('sensor.afval_vandaag')) | timestamp_custom('%d-%m') }}"

# current gas consumption sensor
- platform: derivative
  name: Current gas consumption
  source: sensor.gas_consumption
  time_window: "00:00:10"
  unit_time: s
