# P1 port
- platform: dsmr
  port: /dev/ttyUSB0
  dsmr_version: 4

# sys
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_free
    - type: processor_use
    - type: last_boot
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: processor_temperature
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: ipv4_address
      arg: eth0
    - type: ipv6_address
      arg: eth0

# travis CI
- platform: travisci
  api_key: !secret travis_api_key

# template for octopi
- platform: template
  sensors:
    octoprint_time_elapsed_friendly:
      friendly_name: "Octoprint time elapsed"
      value_template: "{{ states('sensor.octoprint_time_elapsed') | int | timestamp_custom('%H:%M:%S', 0) }}"
    octoprint_time_remaining_friendly:
      friendly_name: "Octoprint time remaining"    
      value_template: >-
        {% set etime = states.sensor.octoprint_time_remaining.state | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {%- if days > 0 -%}
          {%- if days == 1 -%}
            1 day
          {%- else -%}
            {{ days }} days
          {%- endif -%}
          {{ ', ' }}
        {%- endif -%}
        {%- if hours > 0 -%}
          {%- if hours == 1 -%}
            1 hour
          {%- else -%}
            {{ hours }} hours
          {%- endif -%}
          {{ ', ' }}
        {%- endif -%}
        {%- if minutes > 0 -%}
          {%- if minutes == 1 -%}
            1 minute
          {%- else -%}
            {{ minutes }} minutes
          {%- endif -%}
        {%- endif -%}

# time/date
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'date_time_iso'
    - 'time_date'
    - 'time_utc'
    - 'beat'

# Weather prediction
- platform: buienradar
  monitored_conditions:
    # current condition:
    - condition
    - conditioncode
    - conditiondetailed
    - conditionexact
    - symbol
    # conditions for forecasted data:
    - symbol_1d
    - symbol_2d
    - symbol_3d
    - symbol_4d
    - symbol_5d
    - temperature_1d
    - temperature_2d
    - temperature_3d
    - temperature_4d
    - temperature_5d
    - mintemp_1d
    - rainchance_1d
    - rainchance_2d
    - sunchance_1d
    - sunchance_2d
    - rain_1d
    - rain_2d
    - minrain_1d
    - maxrain_1d
    - windforce_1d
    - windforce_2d
    - windspeed_1d
    - windspeed_2d
    - winddirection_1d
    - winddirection_2d
    - windazimuth_1d
    - windazimuth_2d
    - stationname
    - barometerfc
    - barometerfcname
    - feeltemperature
    - humidity
    - temperature
    - groundtemperature
    - windspeed
    - windforce
    - winddirection
    - windazimuth
    - pressure
    - visibility
    - windgust
    - precipitation
    - irradiance
    - precipitation_forecast_average
    - precipitation_forecast_total
    - rainlast24hour
    - rainlasthour

# template
- platform: template
  sensors:
    # difference between outside and inside temperature
    d_in_out_temp:
      friendly_name: "Difference in temperature between outside and inside"
      unit_of_measurement: 'Â°C'
      value_template: "{{ ((states('sensor.br_temperature')| float) - (states('sensor.bedroom_stefan_temperature')| float)) | round(1) }}"
    # solar edge unit conversion templates
    solaredge_current_power_kw:
      value_template: "{{ (states('sensor.solaredge_current_power') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kW'
    solaredge_energy_today_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_today') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_lifetime_energy_kwh:
      value_template: "{{ (states('sensor.solaredge_lifetime_energy') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_year_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_this_year') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredge_energy_this_month_kwh:
      value_template: "{{ (states('sensor.solaredge_energy_this_month') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kWh'
    solaredgemb_ac_power_kw:
      value_template: "{{ (states('sensor.solaredgemb_ac_power') | float / 1000) | round(2) }}"
      unit_of_measurement: 'kW'      
    # meter templates
    daily_energy:
      friendly_name: Daily Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.daily_energy_offpeak')|float + states('sensor.daily_energy_peak')|float) | round(2) }}"
    monthly_energy:
      friendly_name: Monthly Energy
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.monthly_energy_offpeak')|float + states('sensor.monthly_energy_peak')|float) | round(2) }}"
    # solar angle sensor template
    solar_elevation:
      friendly_name: "Sun elevation"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
    solar_azimuth:
      friendly_name: "Sun azimuth"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'azimuth') }}"
    # solar edge state converter
    solaredgemb_status_verbose:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredgemb_status', 'status_description') }}"
    # solar edge installation date
    solaredgemb_installation_date:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'installation_date') }}"
    # solar edge last update time
    solaredgemb_last_update_time:
      friendly_name: "Verbose Solar Edge state"
      value_template: "{{ state_attr('sensor.solaredge_site_details', 'last_update_time') }}"
    # netto consumption = solar_yield - solar_returned + grid_consumption
    netto_consumption:
      friendly_name: "Netto consumption"
      unit_of_measurement: 'kW'
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float) + (states('sensor.power_consumption')| float)) | round(2) }}"
    # solar energy consumed
    solar_consumption:
      friendly_name: "Solar energy consumption"
      unit_of_measurement: 'kW'
      value_template: "{{ ((states('sensor.solaredgemb_ac_power_kw')| float) - (states('sensor.power_production')| float)) | round(2) }}"

# integration for grid feed energy sensor
- platform: integration
  source: sensor.power_production
  name: energy_returned